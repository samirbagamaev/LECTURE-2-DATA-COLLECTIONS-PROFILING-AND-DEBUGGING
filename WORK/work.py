# ДЛЯ СОЗДАНИЯ СПИСКОВ

list_1 = []
list_1 = list()
list_1 = [1 , 3 , 2 , 8]
print(list_1) #чтобы убрать [] и , можно поставить *   \|/ print(*list_1)


########################################################################


#ДЛЯ FOR
list_1 = []
list_1 = list()
list_1 = [1 , 3 , 2 , 8]

# #чтобы сделать ответ в виде списка
for i in list_1: 
    print(i)


########################################################################


#ЧТОБЫ УЗНАТЬ РАЗМЕР НАШЕГО СПИСКА
list_1 = []
list_1 = list()
list_1 = [1 , 3 , 2 , 8]

print(len(list_1)) #Ответ: 4


########################################################################


#ЧТОБЫ ОБРАТИТЬСЯ К НУЖНОМУ ЭЛЕМЕНТУ
list_1 = []
list_1 = list()
list_1 = [1 , 3 , 2 , 8]

# #чтобы сделать индексацию с конца, нужно добавить -1 \\print(list_1[-1]) Ответ: 8
# print(list_1[3]) #ОТВЕТ: 8 \\ НУМЕРОВАНИЕ НАЧИНАЕТСЯ С 0 \\


########################################################################


#ДОБАВЛЯЕМ ЗНАЧЕНИЯ В СПИСОК 

list_1 = [1 , 5]
print(list_1)
list_1.append(8) #append(8) добавили 8 в наш список
print(list_1)
list_1.append(69) #append(69) добавили 69 в наш список
print(list_1)

# ОТВЕТ:
# [1, 5]
# [1, 5, 8]
# [1, 5, 8, 69]


########################################################################


#НАПИШЕМ НЕБОЛЬШУЮ ПРОГРАММУ

list_1 = []
print(list_1)
for i in range(5):
    list_1.append(i)
    print(list_1)

#Ответ:
# []
# [0]
# [0, 1]
# [0, 1, 2]
# [0, 1, 2, 3]
# [0, 1, 2, 3, 4]


########################################################################


#ОСНОВНЫЕ ФУНКЦИИ, КОТОРЫЕ МОГУТ БЫТЬ У НАС В СПИСКАХ

# 1. Удаление последнего элемента списка.
# Метод pop удаляет последний элемент из списка:

list_1 = [12, 7, -1, 21, 0]
print(list_1.pop()) # 0
print(list_1) # [12, 7, -1, 21]
print(list_1.pop()) # 21
print(list_1) # [12, 7, -1]
print(list_1.pop()) # -1
print(list_1) # [12, 7]

#ОТВЕТ:
# 0
# [12, 7, -1, 21]
# 21
# [12, 7, -1]
# -1
# [12, 7]

#МЕТОД POP ТАК-ЖЕ И ВОЗВРАЩАЕТ ЭЛЕМЕНТ

list_1 = [12, 7, -1, 21, 0]

a = list_1.pop()

print(a) # 0
print(list_1) # [12, 7, -1, 21]
print(list_1.pop()) # 21
print(list_1) # [12, 7, -1]
print(list_1.pop()) # -1
print(list_1) # [12, 7]

#ОТВЕТ:
# 0
# [12, 7, -1, 21]
# 21
# [12, 7, -1]
# -1
# [12, 7]



# 2. Удаление конкретного элемента из списка.
# Надо указать значение индекса в качестве аргумента функции pop:

list_1 = [12, 7, -1, 21, 0]
print(list_1.pop(0)) # 12    УДАЛИЛИ 12 ИЗ НАШЕГО СПИСКА
print(list_1) # [7, -1, 21, 0] 



# 3. Добавление элемента на нужную позицию.
# Функция insert — указание индекса (позиции) и значения.

list_1 = [12, 7, -1, 21, 0]
print(list_1.insert(2, 11)) #ДОБАВИЛИ 11 НА 2 ЭЛЕМЕНТ
print(list_1) # [12, 7, 11, -1, 21, 0]

# #ОТВЕТ:
# None
# [12, 7, 11, -1, 21, 0]


########################################################################


#РАБОТА СО СРЕЗАМИ 

#● Отрицательное число в индексе — счёт с конца списка
list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list_1[0]) # 1 ВЫВЕЛИ НУЛЕВОЙ ЭЛЕМЕНТ СПИСКА, ТО ЕСТЬ 1
print(list_1[1]) # 2 ВЫВЕЛИ 1 ЭЛЕМЕНТ СПИСКА, ТО ЕСТЬ 2
print(list_1[len(list_1)-1]) # 10 ВЫВОДИМ 10 ИЗ СПИСКА, ТО ЕСТЬ НАЧИНАЕМ С КОНЦА
print(list_1[-5]) # 6 ВЫВЕЛИ 5 ЭЛЕМЕНТ ИХ СПИСКА С КОНЦА, ТО ЕСТЬ 6
print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ВЫВОДИМ ВСЕ 
print(list_1[:2]) # [1, 2] ВЫВОДИТ ДО 2 ИНДЕКСА
print(list_1[len(list_1)-2:]) #[9, 10] ВЫВЕЛИ 2 ПОСЛЕДНИХ ЭЛЕМЕНТА СПИСКА

# #● Отрицательное число в индексе — счёт с конца списка
print(list_1[2:9]) # [3, 4, 5, 6, 7, 8, 9] ВЫВОДИМ ОТ 2 ЭЛЕМЕНТА ДО 9 ЭЛЕМЕНТА
print(list_1[6:-18]) # []
print(list_1[0:len(list_1):6]) # [1, 7] ВЫВЕЛИ 0-ЛЕВОЙ И 6 ЭЛЕМЕНТЫ СПИСКА
print(list_1[::6]) # [1, 7]


########################################################################


#КОРТЕЖ

# Кортеж — это неизменяемый список.
# Тогда для чего нужны кортежи, если их нельзя изменить? В случае защиты каких-либо
# данных от изменений (намеренных или случайных). Кортеж занимает меньше места в
# памяти и работают быстрее, по сравнению со списка

t = () # создание пустого кортежа
print(type(t)) # class <'tuple'>
t = (1,)
print(type(t))
t = (1)
print(type(t))
t = (28, 9, 1990)
print(type(t))


########################################################################


#РАБОТА С КОРТЕЖАМИ

t  = ()
print(type(t)) #ОТВЕТ: <class 'tuple'>

# t = (1) 
# print(type(t)) #ОТВЕТ: <class 'int'>

t = (1 ,5, 8, 3,)  #НЕ ЗАБЫВАЕМ ЗАПЯТУЮ
print(type(t)) #ОТВЕТ: <class 'tuple'>

v = [1, 8, 9]
print(v)
print(type(v))

v = tuple(v)
print(v)
print(type(v))

#ОТВЕТ:
# <class 'tuple'>
# <class 'tuple'>
# [1, 8, 9]
# <class 'list'>
# (1, 8, 9)
# <class 'tuple'>


########################################################################


#РАЗДЕЛИМ НАШ КОРТЕЖ НА 3 ПЕРЕМЕННЫЕ 
t  = ()
print(type(t))

t = (1 ,5, 8, 3,)
print(type(t))

v = [1, 8, 9]
print(v)
print(type(v))

v = tuple(v)
print(v)
print(type(v))


# #МНОЖЕСТВЕННОЕ ПРИСВАИВАНИЕ 

a = 1
b = 2
#МОЖНО СДЕЛАТЬ ТАК 
a,b = 1,2
#ИЛИ 
a = b = 1 #ТО ЕСТЬ a и b равны 1

a,b,c = v
print(a,b,c)

# #ОТВЕТ:
# <class 'tuple'>
# <class 'tuple'>
# [1, 8, 9]
# <class 'list'>
# (1, 8, 9)
# <class 'tuple'>
# 1 8 9


########################################################################


#ОТЛИЧИЯ КОРТЕЖА ОТ СПИСКА

t = (1, 2, 3, 4, 5)
print(t[1]) #ответ: 2

for i in t:
    print(i)  
#ответ:
# 1
# 2
# 3
# 4
# 5    


#ИЗМЕНИМ КАКОЙ-НИБУДЬ ЭЛЕМЕНТ

t = (1, 2, 3, 4, 5)
t[0] = 2 #ТАК РАБОТАТЬ НЕ БУДЕТ

#А ТАК БУДЕТ
t = [1, 2, 3, 4, 5]
t[0] = 2
print(t)
#ответ:[2, 2, 3, 4, 5]


########################################################################

#СЛОВАРИ

# Словари — неупорядоченные коллекции произвольных объектов с доступом по ключу.

# В списках в качестве ключа используется индекс элемента. В словаре для определения
# элемента используется значение ключа (строка, число).


#СОЗДАЁМ И РАБОТАЕМ СО СЛОВАРЁМ

d = {}

d = dict()

d['q'] = 'qwerty' #ДОБАЛИ ЗНАЧЕНИЕ 
print(d)     #ответ: {'q': 'qwerty'}

d['w'] = 'werty' #ДОБАЛИ ЗНАЧЕНИЕ 
print(d['q'])  #ответ:qwerty


########################################################################


#НЕКОТОРЫЕ ПРИМЕРЫ

#dictionary = словарь 

dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}

print(dictionary['left']) # ← типы ключей могут отличаться

print(dictionary['up']) # ↑ типы ключей могут отличаться

dictionary['left'] = '⇐'

print(dictionary['left']) # ⇐

print(dictionary['type']) # KeyError: 'type'

del dictionary['left'] # удаление элемента

for item in dictionary:           # for (k , v) in dictionary.items():
    print('{}: {}'.format(item, dictionary[item]))

#up: ↑ ВВЕРХ 
#left: ← ВЛЕВО 
#down: ↓ ВНИЗ
#right: → ВПРАВО


#\\\\\\\\\\\\\\\|||||||||||///////////
dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

dictionary[895] = 6969
print(dictionary)

#ответ:{'up': '↑', 'left': '←', 'down': '↓', 'right': '→', 895: 6969}
#Сначала ключевыми значениями были строки, а сейчас число


#\\\\\\\\\\\\\\\|||||||||||///////////

dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

del dictionary['left'] # удаление элемента
for item in dictionary:
    print(item)

#ответ:   
# up
# down
# right 



#ИЛИ
dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

del dictionary['left'] # удаление элемента
for item in dictionary:           # for (k , v) in dictionary.items():
    print('{}: {}'.format(item, dictionary[item]))
 
#ответ:  
# up: ↑
# down: ↓
# right: →



#ЕЩЁ ОДИН ВАРИАНТИК

dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

del dictionary['left'] # удаление элемента

for (k , v) in dictionary.items():
    print(k, v)

#ответ:  
# up ↑
# down ↓
# right →


# ЧТО-ЖЕ ТАКОЕ dictionary.items(): ?

dictionary = {}

dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

print(dictionary.items())

#ответ: dict_items([('up', '↑'), ('left', '←'), ('down', '↓'), ('right', '→')])
#ВЫВОДИТСЯ СПИСОК, ГДЕ КАЖДЫЙ ЭЛЕМЕНТ БУДЕТ ЯВЛЯТСЯ КОРТЕЖОМ ИЗ 2 ЗНАЧЕНИЙ
# 1 ЗНАЧЕНИЕ ЭТО КЛЮЧ , А 2 ЗНАЧЕНИЕ ИЗ НАШЕГО СЛОВАРЯ, ПРИМЕР: ([('up', '↑')) 


########################################################################


#МНОЖЕСТВА

# Множества
# Множества содержат в себе уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два множества,
# Вы можете совершать над ними любые стандартные операции, например, объединение,
# пересечение и разность. Давайте разберем их.

colors = {'red', 'green', 'blue'}
print(colors) # {'red', 'green', 'blue'}
colors.add('red')
print(colors) # {'red', 'green', 'blue'}
colors.add('gray')

print(colors) # {'red', 'green', 'blue','gray'}
colors.remove('red') #удалили red из списка 
print(colors) # {'green', 'blue','gray'}

colors.remove('red') # KeyError: 'red'  находит и удаляет значение из списка
colors.discard('red') # ok

print(colors) # {'green', 'blue','gray'}
colors.clear() #УДАЛЯЕТ ВСЕ ЭЛЕМЕНТЫ ИЗ НАШЕГО МНОЖЕСТВА
print(colors) # set( )

q = set()   #создали множество


########################################################################


#ОПЕРАЦИИ СО МНОЖЕСТВАМИ В PYTHON:

a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy()            # c = {1, 2, 3, 5, 8}
u = a.union(b)          # u = {1, 2, 3, 5, 8, 13, 21}
#СОЕДЕНИЛИ a и b  

i = a.intersection(b)   # i = {8, 2, 5}
#МОЖЕМ НАЙТИ ПЕРЕСЕЧЕНИЯ
#ТО-ЕСТЬ НАЙТИ ЭЛЕМЕНТЫ КОТОРЫЕ НАХОДЯТСЯ И В a И В b

dl = a.difference(b)    # dl = {1, 3} # вычитаем из множества a значения множества b

dr = b.difference(a)    # dr = {13, 21} # вычитаем из множества b значения множества a


q = a.union(b).difference(a.intersection(b))   # {1, 21, 3, 13}
#СНАЧАЛА МЫ НАШЛИ ПЕРЕСЕЧЕНИЕ, ДАЛЬШЕ СОЕДЕНИЛИ А И В, ДАЛЕЕ НАШЛИ РАЗНОСТЬ ОБОИХ СТОРОН


########################################################################


#ЗАМОРОЖЕННЫЕ МНОЖЕСТВА

# Неизменяемое или замороженное множество(frozenset) — множество, с которым не будут
# работать методы удаления и добавления.

a = {1, 2, 3, 5, 8}
b = frozenset(a)
print(b) # frozenset({1, 2, 3, 5, 8})


########################################################################


#ЗАМОРОЖЕННЫЕ МНОЖЕСТВА - ПРОДОЛЖЕНИЕ 

a = {1, 8, 6}

b = frozenset(a) #мы хотим заморозить множество a
print(b)

#ЗАМОРОЖЕННОЕ МНОЖЕСТВО - ЭТО ТО МНОЖЕСТВО КОТОРОЕ МЫ БОЛЬШЕ НЕ МОЖЕМ ИЗМЕННЯТЬ


########################################################################


#LIST COMPREHENSION - ГЕНЕРАТОР СПИСКОВ

# List comprehension — это
# упрощенный подход к созданию списка, который задействует цикл for, а также инструкции
# if-else для определения того, что в итоге окажется в финальном списке.
 
# 1. Простая ситуация — список:
list_1 = [exp for item in iterable]

# 1. Выборка по заданному условию:
list_1 = [exp for item in iterable (if conditional)]





# Задача

# Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:

# 1. Создать список чисел от 1 до 100
list_1 = []
for i in range(1, 101):
list_1.append(i)
print(list_1) # [1, 2, 3,..., 100]


# Эту же функцию можно записать так:
list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]




# Задача

# 2. Добавить условие (только чётные числа)

list_1 = [i for i in range(1, 101) if i % 2 == 0]# [2, 4, 6,..., 100]

#Допустим, вы решили создать пары каждому из чисел (кортежи)
list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]# [(2, 2), (4, 4),..., (100, 100)]

#Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
list_1 = [i * 2 for i in range(10) if i % 2 == 0]
print(list_1) # [0, 4, 8, 12, 16]


########################################################################


#ПРОФИЛИРОВАНИЕ И ОТЛАДКА

# Мы с вами люди, а людям суждено ошибаться, даже при написании программного кода
# Давайте разберем с Вами самые частые ошибки в написании кода на Python.

# 🔥Самые распространенные ошибки:
# ○ SyntaxError(Синтаксическая ошибка)
number_first = 5
number_second = 7
if number_first > number_second # !!!!! ЗАБЫЛИ ДВОЕТОЧИЕ :
 print(number_first)
# Отсутствие :



#IndentationError(Ошибка отступов)
number_first = 5
number_second = 7
if number_first > number_second:
 print(number_first) # !!!!! ЗАБЫЛИ БЛОК ОТСТУПА
# Отсутствие отступов


#TypeError(Типовая ошибка)
text = 'Python'
number = 5
print(text + number) #МОЖНО ТОЛЬКО ТАК number = '5' ТОЛЬКО 2 СТРОУИ МОЖНО СЛОЖИТЬ
# Нельзя складывать строки и числа


#ZeroDivisionError(Деление на 0)
number_first = 5
number_second = 0
print(number_first // number_second)
# Делить на 0 нельзя


#KeyError(Ошибка ключа)
dictionary = {1: 'Monday', 2: 'Tuesday'}
print(dictionary[3])
# Такого ключа не существует


#NameError(Ошибка имени переменной)
name = 'Ivan'
print(names)
# Переменной names не существует


#ValueError(Ошибка значения)
text = 'Python' #ТУТ ДОЛЖНЫ БЫТЬ ЧИСЛА, А НЕ БУКВЫ
print(int(text))
# Нельзя символы перевести в целые значения
